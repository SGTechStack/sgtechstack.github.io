"use strict";(self.webpackChunkeds_library_documentation=self.webpackChunkeds_library_documentation||[]).push([[564],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(t),g=a,m=d["".concat(c,".").concat(g)]||d[g]||l[g]||i;return t?r.createElement(m,o(o({ref:n},p),{},{components:t})):r.createElement(m,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=g;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},1250:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const i={sidebar_position:3},o="Examples",s={unversionedId:"packages/pagination/examples",id:"packages/pagination/examples",title:"Examples",description:"usePaginationQuery",source:"@site/docs/packages/pagination/examples.md",sourceDirName:"packages/pagination",slug:"/packages/pagination/examples",permalink:"/docs/packages/pagination/examples",draft:!1,editUrl:"https://github.com/SGTechStack/sgtechstack.github.io/tree/source/eds-library-documentation/docs/packages/pagination/examples.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Usage",permalink:"/docs/packages/pagination/usage"},next:{title:"API Reference",permalink:"/docs/category/api-reference"}},c={},u=[{value:"usePaginationQuery",id:"usepaginationquery",level:2},{value:"useInfinitePaginationQuery",id:"useinfinitepaginationquery",level:2}],p={toc:u},d="wrapper";function l(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"examples"},"Examples"),(0,a.kt)("h2",{id:"usepaginationquery"},"usePaginationQuery"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"usePaginationQuery")," hook is used for paginated queries where you want to fetch a specific page of data. It utilizes the ",(0,a.kt)("inlineCode",{parentName:"p"},"useQuery")," function from ",(0,a.kt)("inlineCode",{parentName:"p"},"@tanstack/react-query")," under the hood."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import { useState } from \'react\';\nimport { Record, RecordResponse } from \'../record/Record\';\nimport { RecordCard } from \'../record/RecordCard\';\nimport { usePaginatedQuery } from \'@eds-components/pagination-query\';\nimport ReactPaginate from \'react-paginate\';\n\nexport default function RecordResults({ recordsPerPage }: { recordsPerPage: number }) {\n    const [currentPage, setCurrentPage] = useState(0);\n\n    const { status, data, error, refetch, isLoading, isFetching, isError } =\n        usePaginatedQuery<RecordResponse>({\n            path: "records",\n            page: currentPage,\n            size: recordsPerPage,\n            sort: "age",\n            staleTime: 5000,\n            gcTime: 5000\n        });\n\n    if (isLoading) return <div>Loading...</div>\n    if (isError && error instanceof Error) return <div>Error: {error.message}</div>\n    if (data)\n        return (\n            <div>\n                {data._embedded.records.map((record: Record) => {\n                    console.log(data)\n                    return (\n                        <RecordCard\n                            key={record.age}\n                            name={record.name}\n                            age={record.age}\n                            address={record.address}\n                            medicalcondition={record.medicalcondition}\n                        />\n                    );\n                })}\n                <ReactPaginate\n                    breakLabel="..."\n                    previousLabel={"\u2190 Previous"}\n                    nextLabel={"Next \u2192"}\n                    forcePage={currentPage}\n                    onPageChange={(selectedItem: { selected: number }) => setCurrentPage(selectedItem.selected)}\n                    pageCount={data.page.totalPages}\n                    containerClassName={"pagination"}\n                    previousLinkClassName={"pagination__link"}\n                    nextLinkClassName={"pagination__link"}\n                    disabledClassName={"pagination__link--disabled"}\n                    activeClassName={"pagination__link--active"}\n                />\n            </div >\n        );\n    return null;\n}\n')),(0,a.kt)("h2",{id:"useinfinitepaginationquery"},"useInfinitePaginationQuery"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useInfinitePaginationQuery")," hook is similar to ",(0,a.kt)("inlineCode",{parentName:"p"},"usePaginationQuery")," but specifically targets infinite scroll pagination. It utilizes the ",(0,a.kt)("inlineCode",{parentName:"p"},"useInfiniteQuery")," function from ",(0,a.kt)("inlineCode",{parentName:"p"},"@tanstack/react-query")," under the hood."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import { useQueryClient } from '@tanstack/react-query';\nimport { useInfinitePaginationQuery } from '@eds-component/pagination-query';\n\nconst RecordsList = () => {\n  const queryClient = useQueryClient();\n\n  const { data, isLoading, isError, fetchNextPage, hasNextPage } = useInfinitePaginationQuery(\n    'records', // Query key\n    page, // Current page number\n    size, // Page size\n    sort, // Sort field and direction\n    (page, size, sort) => `http://localhost:8080/records?page=${page}&size=${size}&sort=${sort}`, // URL generator function\n    {\n      path: 'records', // Path for the query key\n      staleTime: 10000, // Time in milliseconds before considering the data stale\n      gcTime: 60000, // Time in milliseconds before garbage collecting old page data\n      defaultPageParam: 0, // Default value for the page parameter\n      maxPages: 10, // Maximum number of pages to fetch\n    }\n  );\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (isError) {\n    return <div>Error occurred while fetching data.</div>;\n  }\n\n  return (\n    <div>\n      {/* Render the records list */}\n      {data.pages.map((page) => (\n        // Render each page of records\n      ))}\n      {hasNextPage && (\n        <button onClick={fetchNextPage}>Load More</button>\n      )}\n    </div>\n  );\n};\n")))}l.isMDXComponent=!0}}]);