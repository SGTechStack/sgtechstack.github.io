"use strict";(self.webpackChunkeds_library_documentation=self.webpackChunkeds_library_documentation||[]).push([[564],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>f});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),u=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},p=function(e){var n=u(e.components);return t.createElement(c.Provider,{value:n},e.children)},d="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(r),g=a,f=d["".concat(c,".").concat(g)]||d[g]||l[g]||i;return r?t.createElement(f,o(o({ref:n},p),{},{components:r})):t.createElement(f,o({ref:n},p))}));function f(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=g;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=r[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},1250:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var t=r(7462),a=(r(7294),r(3905));const i={sidebar_position:3},o="Examples",s={unversionedId:"packages/pagination/examples",id:"packages/pagination/examples",title:"Examples",description:"usePaginationQuery",source:"@site/docs/packages/pagination/examples.md",sourceDirName:"packages/pagination",slug:"/packages/pagination/examples",permalink:"/docs/packages/pagination/examples",draft:!1,editUrl:"https://github.com/SGTechStack/sgtechstack.github.io/tree/source/eds-library-documentation/docs/packages/pagination/examples.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Usage",permalink:"/docs/packages/pagination/usage"},next:{title:"API Reference",permalink:"/docs/category/api-reference"}},c={},u=[{value:"usePaginationQuery",id:"usepaginationquery",level:2},{value:"useInfinitePaginationQuery",id:"useinfinitepaginationquery",level:2}],p={toc:u},d="wrapper";function l(e){let{components:n,...r}=e;return(0,a.kt)(d,(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"examples"},"Examples"),(0,a.kt)("h2",{id:"usepaginationquery"},"usePaginationQuery"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"usePaginationQuery")," hook is used for paginated queries where you want to fetch a specific page of data. It utilizes the ",(0,a.kt)("inlineCode",{parentName:"p"},"useQuery")," function from ",(0,a.kt)("inlineCode",{parentName:"p"},"@tanstack/react-query")," under the hood."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import { useState } from 'react';\nimport { RecordResponse } from '../record/Record';\nimport { usePaginatedQuery } from '@eds-components/pagination-query';\n\nexport default function RecordResults({ recordsPerPage }: { recordsPerPage: number }) {\n    const [currentPage, setCurrentPage] = useState(0);\n\n    const { \n      isLoading,\n      isError,\n      isSuccess,\n      status,\n      error,\n      data,\n      refetch,\n      isFetching \n     } = usePaginatedQuery<RecordResponse>({\n      url: \"records\",\n      page: currentPage,\n      size: recordsPerPage,\n      sort: \"age\",\n      staleTime: 5000,\n      gcTime: 5000\n    });\n\n    if (isLoading) return <div>Loading...</div>\n    if (isError && error instanceof Error) return <div>Error: {error.message}</div>\n    if (data)\n        return (\n          <div>\n            {/* Render the records list */}\n            {data.pages.map((page) => (\n              // Render each page of records\n            ))}\n            {hasNextPage && (\n              <button onClick={fetchNextPage}>Load More</button>\n            )}\n          </div>\n        );\n    return null;\n}\n")),(0,a.kt)("h2",{id:"useinfinitepaginationquery"},"useInfinitePaginationQuery"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useInfinitePaginationQuery")," hook is similar to ",(0,a.kt)("inlineCode",{parentName:"p"},"usePaginationQuery")," but specifically targets infinite scroll pagination. It utilizes the ",(0,a.kt)("inlineCode",{parentName:"p"},"useInfiniteQuery")," function from ",(0,a.kt)("inlineCode",{parentName:"p"},"@tanstack/react-query")," under the hood."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import { useState } from 'react';\nimport { RecordResponse } from '../record/Record';\nimport { useInfinitePaginatedQuery } from '@eds-components/pagination-query';\n\nexport default function RecordResults({ recordsPerPage }: { recordsPerPage: number }) {\n    const [currentPage, setCurrentPage] = useState(0);\n\n    const { \n      isLoading,\n      isSuccess,\n      status,\n      data,\n      error,\n      isError,\n      hasPreviousPage,\n      hasNextPage,\n      fetchPreviousPage,\n      fetchNextPage,\n      isFetching,\n      isFetchingPreviousPage,\n      isFetchingNextPage\n     } = useInfinitePaginatedQuery<RecordResponse>({\n      url: \"records\",\n      size: recordsPerPage,\n      sort: \"age\",\n      defaultPageParam: 0,\n      maxPages: 2,\n      staleTime: 5000,\n      gcTime: 1000\n    });\n\n    if (isLoading) return <div>Loading...</div>\n    if (isError && error instanceof Error) return <div>Error: {error.message}</div>\n    if (data)\n        return (\n          <div>\n            {/* Render the records list */}\n            {data.pages.map((page) => (\n              // Render each page of records\n            ))}\n            {hasNextPage && (\n              <button onClick={fetchNextPage}>Load More</button>\n            )}\n          </div>\n        );\n    return null;\n}\n")))}l.isMDXComponent=!0}}]);